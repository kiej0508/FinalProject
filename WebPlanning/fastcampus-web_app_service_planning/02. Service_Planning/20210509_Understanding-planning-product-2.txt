< 02. Service_Planning >

- 프로젝트 기획 산출물의 이해 -

[ 24. 화면설계서 ]
	1. 화면설계서(스토리보드, SB)란?
		※ 화면설계서 : 웹이 대부분 화면을 기반으로 되어 있어서 나온 용어로 화면을 구성하기 위해 기획 과정에서 나온 모든 것을 포함ㅎ한다는 의미로 사용된 용어
		※ Story board/SB : 이용 시나리오와 인터렉션을 강조하여 전반적인 흐름을 보여줘야 한다는 의미에서 사용된 고전적 용어로
	2. 화면설계서의 구성요소
		1) 수정 이력 관리
			- 화면설계서는 숙제처럼 기획자가 작성한다고 해도 프로젝트 기간동안 지속적인 업데이트 필요
			- 개발환경, 법적검토, 사용성검토 등 여러가지 변수로 인해 로직이나 협의 사항이 변화하기 때문에 이에 대한 기록이 필요
		2) 기획 의도 / KPI
			- 특별한 양식 없음
			- 기획 의도에는 기획 요청자의 배경을 포함하여 기획자에 의해서 해석된 프로젝트의 목적과 목표를 작성
				- 비즈니스적 관점에서 프로덕트 운영 사상과 정책 반영
			- 오픈 전후 효과를 측정할 수 있는 KPI가 있으면 기록. 만약 수치화 시킬 수 있는 것이 없다면 사용성 테스트 등 정성적인 목표나 계획을 포함
		3) 프로세스 플로우차트
			- 프로젝트에서 다루는 서비스의 흐름이 있는 경우, 플로우 차트로 정리하여 제시하면 서비스 파악이 용이
			- 화면설계서는 디자이너, 개발다 등 협업자와의 커뮤니케이션 문서이므로 처음에는 프로젝트 범위에 대해서 인지시키는 것이 중요
		4) 수정 및 신규 화면 목록(IA)
			- 프로젝트에 포함되어 있는 개발 범위를 페이지 잔위 목록, 트리구조로 표시
			- 전체 개발범위를 이해하기 쉽도록 표시하여 기존 IA상 화면들의 관리를 위해서도 필요
		5) 와이어프레임, 목업케이스, 디스크립션
			- 와이어프레임과 목업을 넣어 레이아웃 설계 옆에 세부적인 디스크립션을 추가
			- 화면이 케이스에 따라 변화할 경우 화면을 여러 개로 분리하여 케이스를 표시
			- 디스크립션은 인터렉션, 정책, 로직 등 디자인/개발에 필요한 모든 사항 기록
	
	※ 화면설계서는 기획자와 협업자의 가장 중요한 커뮤니케이션 문서
	
	3. 디스크립션의 작성
		- 디스크립션은 세부적으로 쪼개서 명확하고 정확하게 작성해야한다
		- 인터렉션과 데이터 노출에 대한 부분의 로직을 분명히 해야한다
		- 개발과 디자인시에 관련된 이슈사항이나 우회사항이 있다면 명시해줘야한다
		- 정책이 불분명한 부분은 명시하여 추후 버전관리가 되도록 해야한다.
		1) 케이스의 구분과 작성_분기처리와 예외처리
			- full case 방식 & 케이스별 작성 방식
			- 케이스가 다를 경우, 케이스의 가지수와 경우의 수를 명시해줘야한다.
			- 분기처리 : 동일한 화면에서 입력되는 데이터 케이스에 따라 다른 UI나 출력값이 보여주는 케이스
				ex) 로그인 & 비로그인의 출력값이 다른 경우
			- 예외처리 : 데이터를 불러오는 영역에서 비정상적인 데이터나 이용상황에서 발생되는 문제를 방지하기 위한 조치
				cf) 유효성체크(Valldation Check)
		2) 디스크립션 정의의 예시
			- 통이미지인가
			- 이미지텍스트인가 (화면 해상도에 따라서 가변적으로 크기가 달라짐)
			- 시스템폰트인가 (화면 해상도가 달라져도 고정되어 있음)
			- 고정 / 가변인가 (모든 경우에 동일한가 / 가져오는 데이터에 따라 변동이 일어나는 부분인가)
			- 데이터 호출 / 케이스구분인가 (어느 데이터를 호출하는가?)
			- 데이터의 관리화면은 무엇인가 (admin이 어디인지)
		3) 디스크립션의 고도화_협업자의 눈으로 보기
			- 비주얼 디자이너의 예상 질문
				- 5초 후 롤링되어서 뭘로 바뀌는거죠?
				- 등수에 따른 이벤트에 해당하면 어떤 표시를 해주나요?
				- 등수딱지는 몇 등까지 표시되나요?
				- 가로모드에서도 동일하게 1줄 전체에 차지하게 나오면 되나요?
				...
			- 개발자 예상질문
				- 5초후 롤링될 때 동작은 아래로 가나요 위로 가나요?
				- 동시에 입장할 수 있는 입장등수는 어떤 기준으로 산정하나요?
				- 등수에 따른 이벤트는 어느 abck office 화면에서 컨트롤하나요? 이것도 개발해야 하나요?
				- 실시간 방송전에 인입 시에는 어떻게 처리하나요?
				...
		
		※ 디스크립션은 기획자가 아는 만큼 고도화된다

[ 25. User Story와 Backlog ]
	1. User Story와  Backlog란?
		1) User Story
			- 이용자의 관점에서 간단한 기능 정의 (고객은 주문을 한다)
		2) Backlog
			- 우선순위가 있는 기능 리스트
		
		"고객 정의를 통해 컨텍스트와 목표를 포함하여 서비스에 포함되어야 할 기능 정의 항목"
		= UX정의 + 비즈니스 + UI요소 + 디스크립션 + 테스트케이스
	
	2. User Story의 작성
		- Product Owner가 기본적으로 작성해온 프로토타입을 보며 User Story를 작성
		- User Story는 팀원 모두가 작성하지만 그 중에서 PO가 User Story의 경중을 선정하여 Backlog를 선정
		1) 작성 규칙
			- 타이틀 (10개 어위 이하)
			- 디스크립션 (비즈니스적인 이유, 고객 구매 전환 등)
			- 페르소나 설정
			- 테스트 패스 조건
		2) 특성
			- Independent 독립적이다
			- Negotiable 협상 가능하다
			- Valueable 사용자와 비즈니스에 가치가 있다
			- Estimate 예측 가능하다
			- Smal 사이즈가 작아야 한다 (2~3주 내 개발 가능)
			- Testable 테스트가 가능해야한다
			But, 이 모든 것을 갖추기 쉽지 않다.
			HOW가 아닌 WHO, WHAT, WHY를 디테일하게 쓰자
		3) 우선순위에 따른 Map 작성
			- Persona 기준 또는 Task 기준
			* 일종의 그룹핑
			???스프린트???
		4) 우선순위 평가 방법
			(1) Assumption Test
				- 중요한 비즈니스 가설일수록 큰 포인트 + 사용자에게 중요도가 노플수록 큰 포인트
			(2) MoSCoW
				- Must / Should / Could / Won't
			(3) BUC
				- Business benefit + User benefit - Cost
			→ 각 User Story에 Point를 산정, 상대적 비교를 통해 중요도를 선정해야한다
	
	3. User Story 기반 Backlog의 작성
		1) User Story의 세분화
			- User Story가 너무 클 경우, Epic, Task, Sub Task로 구분하여 관리
			(1) Epic :  전체를 관통할 수 있을만한 사이즈
			(2) Task :  @@한 유저에 대한 & ##한 유저에 대한
			(3) Sub Task : @@한 유저한 무엇인가 등
		2) Infra 기능의 구분
			- User나 기능에 관계없이 기본적으로 되어야하는 개발은 Infra로 구분하여 Backlog를 별도 작성
		3) User Story의 등록 시 연결될 프로토타이핑을 함께 등록
	
	※ User Storydhk Backlog는 산출물의 형태를 재조합하고 효율화하지만 기획 역량은 여전히 중요하다

[ 26. 테스트 케이스(T/C) ]
	1. 테스트 단계의 업무와 협업자 구분
		1) QA (Quality Assurance) : 제품 개발단계 품질 보증 활동, 고품질 제품 확보가 주요 목적
			- 테스트 일정 수립
			- 프로젝트의 제품 수준 영향에 대한 의견 제시
			- Lesson & learn 공유
			- QC 인력 설계
			- 오픈 여부의 결정
		2) QC (Quality Control) : 제품 양산 단계 품질 관리, 불량품 제거가 주요 목적
			- Test Case 수행
			- 오류에 대한 공유 및 처리 확인
			- 오류 상황 관리
			* 서비스 기획을 완전히 숙지하고, 오류가 나타나는 케이스의 설명과 예상되는 이유를 함께 전달해주는 경우가 아주 좋은 QC
		3) QE (Quality Engineering) : QA/QC를 수행하기 위해 필요한 모든 엔지니어링 활동
			- 자동화 T/C 설계
			- 테스트 자동화 구현
			- 테스트용 데이터 생성
	
	2. 테스트 단계의 업무와 협업자 구분
		1) 단위 테스트
			- 기능 단위 테스트
			- 데이터 확인
			- UI 테스트
			* 단위 테스트 설계 : UI 동작과 기능을 작동 스텝별로 기대결과를 기록
		2) 통합 테스트
			- 시나리오 테스트
			- Ad-hoc 테스트
			- 디바이스 테스트 (안드로이드, ioc, 웹)
			* 통합 테스트 케이스 설계 : Task 단위의 시나리오를 케이스별로 작성하여 테스트
		3) 사용성 테스트
			- 동작, 인터렉션, 사용성에 대한 최종 점검
		4) 베타 테스트(close/open)
			- 오픈 후 실제 운영
	
	3. 테스트의 설계를 위한 협업
		- SB와 기획안 리뷰
		- Test 설계를 위한 고객 UX 전달
		- 최소 테스트 기간 정의
		- 테스트 케이스의 구성 정의
		- 기준/대상 디바이스 선정
	
	※ 좋은 테스트 결과는 얼마나 면밀히 기획했는지에 좌우된다

[ 27. 운영 가이드 매뉴얼 ]
	1. 오픈을 위해 기획자가 해야할 일
		1) 오픈 전 운영 계획 확정
			- 누가 운영할 것인가?
			- 운영 주기는 얼마인가?
			- 오픈 컨텐츠의 작업 일정은 어떻게 되는가?
		2) 오픈 운영 가이드(매뉴얼) 작성 및 교육 진행
			- 시스템 교육 대상은 누구인가?
			- 운영 교육 일정 및 공유 문서 제작
			- CS/SCM/법무팀 등 기획 시 유관부서에 오픈 일정 및 변경사항 공유
			- 고객 안내 사항
	
	2. 운영 가이드의 형태
		1) 이용자 가이드
		2) 운영자 가이드 (Back office)
	
	3. 운영 매뉴얼과 SB의 차이점
		1) 문서를 보는 대상이 다름
			- 운영 케이스와 입장에 따라 n개 필요 (입력자와 승인자 등)
		2) SB는 사용자에게 과한 정보를 담고 있다
			- 사용자가 필요한 범위의 내용만 담고 있으면 된다
			- 복잡도가 높은 문서를 받을 수록 운영자가 읽지 않는다
		3) 가이드는 정책에 대해서 추가 협의를 하려는 문서가 아니다
	
	4. 운영 가이드 매뉴얼의 작성
		1) 업무자별로 가이드 대상자를 나누어, 작성할 가이드 개수를 파악
		2) 업무자별로 목적에 맞게 가이드를 작성
		3) 각 업무자들이 할 수 있는 질문을 예상하여 기록
		4) 오픈 일정에 따른 오픈 컨텐츠 입력 일정을 공지
	
	※ 화면만 보고 쓸 수 없다면, 매뉴얼은 사용자 교육에 필수적. But, 모든 사용자가 읽지는 않는다


[ Today my impression ]
인터렉션의 종류, UI용어 등에 대한 동향 공부를 더 해야할 것 같다. 실무에 대한 개념을 배울 수 있었지만, 실제로 업무를 할 때 어떤 기획을 할 수 있을지에 대한 지식이 부족하다고 느꼈다.